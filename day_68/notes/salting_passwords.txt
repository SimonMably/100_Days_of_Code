Salting Passwords

Hashing = putting a password through a Hash Function to get a hash

Password ------> Hash Function -------> Hash


Salting adds a generated random set of characters to the password before it goes through the Hash Function. So,
the the resulting hash is created from both the password as well as that random unique salt. This adds an extra
layer of security.

Password (eg. qwerty) + salt (eg. 28891) -------> Hash Function -------> Hash

This means that no matter how simple the password of the user is, adding that increased salt increases its
complexity, increases the number of characters, and it makes the user database a lot more secure.

Hackers can still generate the password and salt combinations from a hash, so we would need something else to
increase security.
One thing we could do is not use MD5 hashes, but use another hashing algorithm instead, like bcrypt.

Whereas hackers computers can calculate 20,000,000,000 MD5 hashes/second, even the latest computers with the
greatest GPUs from the last couple of years could calculate about 17,000 bcrypt hashes per second, which makes
it dramatically harder for a hacker to generate those pre-compiled hash tables.
And a salted hash table, instead of taking around 3 seconds if it wah hashed with MD5. If it was hashed with
bcrypt, it would take somewhere in the region of 8 months to calculate, which is not really worth a hackers
time (hopefully).

And to make passwords more secure when using bcrypt, it has a concept of what's called "salt rounds", how many
rounds of you're going to salt a password with. The more rounds of salting a password goes through, the saltier
the password and also the more secure it is from hackers.


What exactly are salt rounds.

Well, if we have a password and we generate a set of random character as the salt. We pass this password and
salt through the hash function (eg. bcrypt) and end up with a hash. That is 1 round of salting.

If we wanted to have 2 rounds of salting, then we take the hash that was generated on the first round and we
add the same salt as before (ie. the same set of random characters). Then we run it through the hash function
again (eg. bcrypt), and we end up with a different hash. And the number of times this is done is the number of salt
rounds.

Step 1. 1st salt round:
Password + Salt -----> Hash Function -------> Hash

Step 2. Next round of Salt (Nth Round of Salt):
Resulting Hash from previous round of salt + Same Salt -------> Hash Function --------> Different Hash

Step 3. with each round of salt, redo step 2 with the resulting hash