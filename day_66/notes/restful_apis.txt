RESTful API's

REST = REpresentational State Transfer

A Client makes a request to the Server. There different types of requests, they
include:
- a HTTP (HyperText Transfer Protocol) request
- a HTTPS (HyperText Transfer Protocol Secure) request (secures the request with
  encryption and cryptography
- a FTP (File Transfer Protocol) request

For the correct result, the Client will have to make the correct type of request.
If the Client makes a bad request to the Server, the Server will respond to the
Client with a 404 error.

If the Client makes the correct request, the Server will respond with the results
of the Clients request (e.g. webpage HTML, resources like images and/or data).
In order to give the Client the result, the Server might do 2 things:

1. The Server might do some computation and run some code to work out what the Client
   needs. For example, a Server would do this if it was a simple web application.

or

2. The Sever might need ti communicate withe a database to grab the relevant pieces
   of data that Client requested.

Depending on what of request the Client made and what kind of resource they wanted,
then the Server may do 1 or both of the above things.

So, the Client has to talk with the Server using an HTTP request (a specific language
that the Server can understand).
But also, there is only a certain amount of things that the Server can do. The Server
will have a whole bunch of API's (which are services) that it can expose for Clients
to be able to tap into. Building an API is like making a menu of things that the
Server can respond to when a Client makes a request.


What does it mean to make an API RESTful?

REST is essentially just an architectural style. Just like architects having
different architectural styles for designing buildings (e,g, Baroque, Gothic,
Neoclassical), REST is an architectural style for building APIs.

Although popular, REST isn't the only architectural style for designing APIs.
The other popular style (before REST became the dominant style) was SOAP. There's
also GraphQL, FALCOR and others.
But the Gold standard for web APIs is REST.


How do we make an API RESTful?

There is a lot of rules that an API has to follow to become RESTful. The two most
important rules are;
- Use HTTP request verbs (using that HTTP request language)
- Use a specific pattern of route and endpoint URLs


What are the HTTP verbs?

HTTP verbs include:
- GET
- POST
- PUT / PATCH (PATCH is relatively new, it came in in 2010)
- DELETE

These HTTP verbs are similar to database CRUD operations (CREATE, READ, UPDATE, DELETE).


Specific Routes and Endpoints

As a safari would have different routes to get to certain areas (elephant area,
camel area, or the hippo area), the same for a Server where we can specify specific
routs or URLs in order to access certain resources.
For example, we might have 'www.google.com/elephants' that would bring up the
resources for the elephants, 'www.google.com/camels' would be camels and
'www.google.com/hippos' would be for hippos. These examples are routes.

But, in order for an API to be RESTful, we have to have a specific pattern of
endpoints and routes.

For example, the Wikipedia API:

HTTP Verbs  |       /articles         |  /articles/jack-bauer      |
-------------------------------------------------------------------|
   GET      |   Fetches ALL articles  | Fetches THE article on     |
            |                         |       jack-bauer           |
-------------------------------------------------------------------|
   POST     | Creates ONE new article |                            |
-------------------------------------------------------------------|
   PUT      |                         | Updates THE article on     |
            |                         |      jack-bauer            |
-------------------------------------------------------------------|
   PATCH    |                         | Updates THE article on     |
            |                         |      jack-bauer            |
-------------------------------------------------------------------|
   DELETE   |   Deletes ALL articles  | Deletes THE article on     |
            |                         |       jack-bauer           |
-------------------------------------------------------------------|

If we had a database that was full of articles, the route for '/articles' applies
to all of the articles. Now, if we created a route for articles, then when a Client
makes a GET request to '/articles', it should fetch all of the articles.
And when they make a POST request to the '/articles' route, then it should create
a single new article and add it to the database of articles.
When they make a DELETE request to '/articles', then it would delete all the articles
in the the database.

RESTful routing also has rules for individual resources. So, withing the database
of articles, there are individual articles. So if there were an article on the
character 'Jack Bauer' from the TV show '24', we can use the same GET/DELETE
requests as above along with the PUT and PATCH requests (which are used for updating
things) to target the Jack Bauer article ('/articles/jack-bauer') and these request
will only affect the Jack Bauer article specifically and nothing else.